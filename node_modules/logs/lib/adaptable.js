"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
class AdaptableLogger {
    constructor(native, extender) {
        this._native = native;
        this._extender = extender;
    }
    get native() {
        return this._native;
    }
    get level() {
        return this._native.level;
    }
    set level(level) {
        this._native.level = level;
    }
    extend(name, color) {
        if (this._extender) {
            return this._extender(name, color);
        }
        throw new Error('`extender` is not provider');
    }
    log(level, ...args) {
        if (typeof this._native[level] === "function") {
            this._native[level](...args);
        }
        else {
            this._native.log(level, ...args);
        }
        if (level === 'fatal') {
            process.exit(1);
        }
    }
    ;
    trace(...args) {
        return this.log('trace', ...args);
    }
    debug(...args) {
        return this.log('debug', ...args);
    }
    info(...args) {
        return this.log('info', ...args);
    }
    warn(...args) {
        return this.log('warn', ...args);
    }
    error(...args) {
        return this.log('error', ...args);
    }
    fatal(...args) {
        return this.log('fatal', ...args);
    }
    isLevelEnabled(level) {
        const native = this._native;
        const method = 'is' + _.capitalize(level) + 'Enabled';
        if (typeof native[method] === "function") {
            return native[method]();
        }
        else if (native.isLevelEnabled) {
            return native.isLevelEnabled(level);
        }
        else if (native.levels) {
            return native.levels[native.level || 'debug'] >= native.levels[level];
        }
        else {
            return true;
        }
    }
    ;
    isTraceEnabled() {
        return this.isLevelEnabled('trace');
    }
    ;
    isDebugEnabled() {
        return this.isLevelEnabled('debug');
    }
    ;
    isInfoEnabled() {
        return this.isLevelEnabled('info');
    }
    ;
    isWarnEnabled() {
        return this.isLevelEnabled('warn');
    }
    ;
    isErrorEnabled() {
        return this.isLevelEnabled('error');
    }
    ;
    isFatalEnabled() {
        return this.isLevelEnabled('fatal');
    }
    ;
}
exports.AdaptableLogger = AdaptableLogger;
//# sourceMappingURL=adaptable.js.map