import { Logger } from "./logger";
export declare const version: any;
export interface LoggingOptions {
    parent?: any;
    [name: string]: any;
}
export interface Provider {
    getLogger: (name: string, options: any) => any;
    setLevel?: (level: string) => void;
    middleware?: (opts: any) => (req: any, res: any, next: any) => void;
}
export declare class Library {
    name: string;
    provider: Provider;
    constructor(name: string, settings?: {
        [name: string]: any;
    });
    setLevel(level: any): void | undefined;
    get(name: string, options?: LoggingOptions): Logger;
    get(name: string, color: string, options?: LoggingOptions): Logger;
    get(name: string, color?: string, categories?: string[], options?: LoggingOptions): Logger;
    middleware(opts: any): (req: any, res: any, next: any) => void;
}
export declare function use(name: string, settings?: {
    [name: string]: any;
}, showUsingLogs?: boolean): any;
export declare function setLevel(level: any): any;
export declare function get(name: string, options?: LoggingOptions): Logger;
export declare function get(name: string, color: string, options?: LoggingOptions): Logger;
export declare function get(name: string, color: string, category?: string[], colors?: string[], options?: LoggingOptions): Logger;
